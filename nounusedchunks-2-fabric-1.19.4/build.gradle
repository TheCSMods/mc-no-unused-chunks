import com.google.gson.Gson
import com.google.gson.reflect.TypeToken
import java.lang.reflect.Type

plugins
{
	id 'fabric-loom' version '1.0-SNAPSHOT'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.mod_id
version = project.mod_version
group = project.maven_group

repositories
{
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
	maven { url "https://maven.shedaniel.me/" }
	maven { url "https://maven.terraformersmc.com/releases/" }
}

dependencies
{
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	
	// Fabric API
	// modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	// Don't forget to declare | "fabric":"*" | as a dependency in fabric.mod.json
	
	// Mod Menu
	modApi "com.terraformersmc:modmenu:${project.modmenu_version}"
	
	// Roughly Enough Items
	// modApi "me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}"
	
	// Uncomment the following line to enable the deprecated Fabric API modules. 
	// These are included in the Fabric API production distribution and allow you to update your mod to the latest modules at a later more convenient time.
	// modImplementation "net.fabricmc.fabric-api:fabric-api-deprecated:${project.fabric_version}"
}

processResources
{
	// inputs.property "version", project.version
	filesMatching(["fabric.mod.json", "**/mods.toml"]) { expand project.properties }
}

//this task includes `MixinConfigs` metadata for the Forge platform
//(it is important that this task runs AFTER the `processResources` task)
task updateMixinConfigs
{
	doLast
	{
		// 1. Read the `fabric.mod.json` file and parse the JSON.
		File jsonFile = file('src/main/resources/fabric.mod.json')
		String jsonString = jsonFile.text
		Gson gson = new Gson()
		Type type = new TypeToken<Map<String, Object>>(){}.getType()
		Map<String, Object> jsonMap = gson.fromJson(jsonString, type)

		// Check if the `mixins` property exists
		if (!jsonMap.containsKey("mixins")) { return }

		// 2. Extract the `mixins` array and convert it to a string.
		List<String> mixinList = (List<String>) jsonMap.get("mixins")
		String mixinConfigs = String.join(",", mixinList)

		// 3. Add the resulting string to the `MixinConfigs` property in the `MANIFEST.MF` file.
		jar { manifest { attributes 'MixinConfigs': mixinConfigs } }
	}
}
updateMixinConfigs.mustRunAfter processResources //this task depends on that task being run first
jar.dependsOn updateMixinConfigs //important to execute before the `jar` task

tasks.withType(JavaCompile).configureEach
{
	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release = 17
}

java
{
	// Loom will automatically attach sourcesJar to a RemapSourcesJar
	// task and to the "build" task if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
	
	// Generate Java docs.
	javadoc.options.addStringOption('Xdoclint:none', '-quiet')
	withJavadocJar()
}

jar
{
	//exclude all .class files outside of the maven group
	def includeOnlyPackage = project.maven_group.replaceAll('\\.', '/')
	eachFile { fileCopyDetails ->
        if (fileCopyDetails.name.endsWith('.class') && !fileCopyDetails.relativePath.pathString.startsWith(includeOnlyPackage)) {
            fileCopyDetails.exclude()
        }
    }
    
    //handle the license file
	from("LICENSE") { rename { "${it}_${project.archivesBaseName}"} }
}

// configure the maven publication
publishing
{
	publications
	{
		mavenJava(MavenPublication) { from components.java }
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories
	{
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
